"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var Permissions_1 = require("../../utils/keypair/Permissions");
var NoncePointer_1 = require("./NoncePointer");
var SubscriptionPointer_1 = require("../service/SubscriptionPointer");
var SharePointer_1 = require("./SharePointer");
var TokenPointer_1 = require("./TokenPointer");
// An helper data structure used at the business side to keep track
// of the data field that need to be fetched from service provider
var NoncePointerTuple = /** @class */ (function () {
    function NoncePointerTuple(userEntryKey, sharePointerKey, noncePointer, noncePointerKey) {
        this.userEntryKey = userEntryKey;
        this.sharePointerKey = sharePointerKey;
        this.noncePointer = noncePointer;
        this.noncePointerKey = noncePointerKey;
    }
    return NoncePointerTuple;
}());
var ShareDataRepositoryImpl = /** @class */ (function () {
    function ShareDataRepositoryImpl(dataRequestManager, profileManager, offerShareDataRepository) {
        this.dataRequestManager = dataRequestManager;
        this.profileManager = profileManager;
        this.offerShareDataRepository = offerShareDataRepository;
    }
    ShareDataRepositoryImpl.prototype.grantAccessForOffer = function (offerSearchId, offerOwner, acceptedFields, priceId, clientId) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, this.dataRequestManager.grantAccessForOffer(offerSearchId, offerOwner, acceptedFields, priceId).then(function () {
                        // Find all the requested fields that are generated
                        // by service provider
                        return _this.profileManager.getData().then(function (data) {
                            var keys = new Array();
                            acceptedFields.forEach(function (value, key) {
                                var entryData = data.get(key);
                                if (entryData !== undefined && SubscriptionPointer_1.default.conform(entryData)) {
                                    // This is a pointer entry, create the key that business will generate
                                    var subscriptionPointer = JSON.parse(entryData);
                                    keys.push(NoncePointer_1.default.generateKey(clientId, subscriptionPointer.spid));
                                }
                            });
                            // Case: none of the requested data is generated by service provider
                            if (keys.length == 0) {
                                return new Promise(function (resolve) { return resolve(true); });
                            }
                            // Case: some of the requested data is generated by service provider
                            else {
                                // Wait response from business and then notify service provider to
                                // share the data with business
                                return new Promise(function (resolve) {
                                    var timer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                                        var entries;
                                        var _this = this;
                                        return __generator(this, function (_a) {
                                            switch (_a.label) {
                                                case 0: return [4 /*yield*/, this.checkRequestStatus(clientId, offerOwner, keys)];
                                                case 1:
                                                    entries = _a.sent();
                                                    if (entries.size == keys.length) {
                                                        // Business is ready, client tell each service provider to share data
                                                        // with business by creating & sharing data entries
                                                        entries.forEach(function (value, key) { return __awaiter(_this, void 0, void 0, function () {
                                                            return __generator(this, function (_a) {
                                                                switch (_a.label) {
                                                                    case 0: 
                                                                    // Here the key will be a tuple of uid and spid, value will be
                                                                    // a business generated nonce.
                                                                    return [4 /*yield*/, this.notifyServiceProvider(value, key, offerOwner)];
                                                                    case 1:
                                                                        // Here the key will be a tuple of uid and spid, value will be
                                                                        // a business generated nonce.
                                                                        _a.sent();
                                                                        return [2 /*return*/];
                                                                }
                                                            });
                                                        }); });
                                                        resolve(true);
                                                        clearTimeout(timer);
                                                    }
                                                    return [2 /*return*/];
                                            }
                                        });
                                    }); }, 10000);
                                });
                            }
                        });
                    })];
            });
        });
    };
    ShareDataRepositoryImpl.prototype.acceptShareData = function (data, uid, bid, searchId, worth) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        // Return value
                        var resMap = new Map();
                        _this.offerShareDataRepository.acceptShareData(searchId, worth)
                            .then(function () {
                            var spidEntry = new Map();
                            // Parse all the shared fields and see which fields are generated by
                            // third-party service providers
                            data.forEach(function (value, key) {
                                if (SubscriptionPointer_1.default.conform(value)) {
                                    var subscriptionPointer = JSON.parse(value);
                                    var spid = subscriptionPointer.spid;
                                    // TODO: the schema is not used here
                                    spidEntry.set(spid, new NoncePointerTuple(key, SharePointer_1.default.generateKey(uid, bid), new NoncePointer_1.default(_this.getRandomInt()), NoncePointer_1.default.generateKey(uid, spid)));
                                }
                                else {
                                    // If the data shared is not generated by service provider (only between user and business), 
                                    // this single transaction is finished 
                                    // TODO: add smart contract operation here
                                    resMap.set(key, value);
                                    console.log("Confirm data is received with user");
                                }
                            });
                            if (spidEntry.size > 0) {
                                var updates_1 = new Map();
                                spidEntry.forEach(function (value) {
                                    updates_1.set(value.noncePointerKey, JSON.stringify(value.noncePointer));
                                });
                                _this.profileManager.updateData(updates_1).then(function () {
                                    // Share back to user, get the current request status first
                                    _this.dataRequestManager.getGrantedPermissionsToMe(uid).then(function (grantedFields) {
                                        var grantFields = new Map();
                                        grantedFields.forEach(function (field) { return grantFields.set(field, Permissions_1.AccessRight.R); });
                                        updates_1.forEach(function (value, field) { return grantFields.set(field, Permissions_1.AccessRight.R); });
                                        _this.dataRequestManager.grantAccessForClient(uid, grantFields).then(function () {
                                            var timer = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
                                                var spids, i, noncePointerTuple, keyArray, response, dataString, sharePointer;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0:
                                                            spids = Array.from(spidEntry.keys());
                                                            i = 0;
                                                            _a.label = 1;
                                                        case 1:
                                                            if (!(i < spids.length)) return [3 /*break*/, 4];
                                                            noncePointerTuple = spidEntry.get(spids[i]);
                                                            if (noncePointerTuple === undefined) {
                                                                return [3 /*break*/, 3];
                                                            }
                                                            keyArray = new Array();
                                                            keyArray.push(noncePointerTuple.sharePointerKey);
                                                            return [4 /*yield*/, this.checkRequestStatus(bid, spids[i], Array.from(keyArray))];
                                                        case 2:
                                                            response = _a.sent();
                                                            dataString = response.get(noncePointerTuple.sharePointerKey);
                                                            if (dataString !== undefined) {
                                                                sharePointer = JSON.parse(dataString);
                                                                if (this.businessVerifyMessage(sharePointer, uid, bid, noncePointerTuple.noncePointer.nonce)) {
                                                                    // Confirm data from this service provider is received and is verified, remove the key
                                                                    // from spidKey
                                                                    resMap.set(noncePointerTuple.userEntryKey, sharePointer.data);
                                                                    spidEntry.delete(spids[i]);
                                                                    // TODO: smart contract operation, confirm data received
                                                                    console.log("data received: " + spids[i]);
                                                                }
                                                            }
                                                            _a.label = 3;
                                                        case 3:
                                                            ++i;
                                                            return [3 /*break*/, 1];
                                                        case 4:
                                                            // TODO: Check if responses from all service provider has received
                                                            if (spidEntry.size == 0) {
                                                                console.log('all data received');
                                                                resolve(resMap);
                                                                clearTimeout(timer);
                                                            }
                                                            return [2 /*return*/];
                                                    }
                                                });
                                            }); }, 10000);
                                        });
                                    });
                                });
                            }
                            else {
                                // TODO: add smart contract operation
                                console.log("finished, pay user");
                                resolve(resMap);
                            }
                        })
                            .catch(function () { return resolve(resMap); });
                    })];
            });
        });
    };
    ShareDataRepositoryImpl.prototype.shareWithBusiness = function (key, value, uid) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenPointer, bid;
            var _this = this;
            return __generator(this, function (_a) {
                tokenPointer = JSON.parse(value);
                bid = TokenPointer_1.TokenPointer.getBID(key);
                // Get data of this client generated by this service provider
                return [2 /*return*/, this.profileManager.getData()
                        .then(function (entries) {
                        return new Promise(function (resolve) {
                            var data = entries.get(uid);
                            if (data === undefined) {
                                resolve(false);
                            }
                            else {
                                var sharePointer = new SharePointer_1.default(tokenPointer, data);
                                var key_1 = SharePointer_1.default.generateKey(uid, bid);
                                var updates = new Map();
                                updates.set(key_1, JSON.stringify(sharePointer));
                                _this.profileManager.updateData(updates)
                                    .then(function () {
                                    // Grant this entry to client
                                    _this.grantAccessForClientHelper(uid, key_1, Permissions_1.AccessRight.R)
                                        .then(function (res) {
                                        if (!res) {
                                            resolve(false);
                                        }
                                        else {
                                            // Grant this entry to business
                                            _this.grantAccessForClientHelper(bid, key_1, Permissions_1.AccessRight.R)
                                                .then(function (res) {
                                                if (!res) {
                                                    resolve(false);
                                                }
                                                else {
                                                    // TODO: add smart contract operations here
                                                    resolve(true);
                                                }
                                            })
                                                .catch(function () { return resolve(false); });
                                        }
                                    })
                                        .catch(function () { return resolve(false); });
                                })
                                    .catch(function () { return resolve(false); });
                            }
                        });
                    })
                        .catch(function () { return new Promise(function (resolve) { return resolve(false); }); })];
            });
        });
    };
    ShareDataRepositoryImpl.prototype.isSharePointerExist = function (uid, bid) {
        var _this = this;
        var sharePointerKey = SharePointer_1.default.generateKey(uid, bid);
        return new Promise(function (resolve) {
            _this.profileManager.getData()
                .then(function (data) {
                resolve(data.get(sharePointerKey) ? true : false);
            });
        });
    };
    /**
     * Check whether all the keys are granted.
     * @param from
     * @param to
     * @param keys
     */
    ShareDataRepositoryImpl.prototype.checkRequestStatus = function (from, to, keys) {
        return __awaiter(this, void 0, void 0, function () {
            var res, dataRequests, i, request, data, j, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        res = new Map();
                        return [4 /*yield*/, this.dataRequestManager.getRequests(from, to)];
                    case 1:
                        dataRequests = _a.sent();
                        i = 0;
                        _a.label = 2;
                    case 2:
                        if (!(i < dataRequests.length)) return [3 /*break*/, 5];
                        request = dataRequests[i];
                        if (request.responseData.length == 0) {
                            return [3 /*break*/, 4];
                        }
                        return [4 /*yield*/, this.profileManager.getAuthorizedData(request.toPk, request.responseData)];
                    case 3:
                        data = _a.sent();
                        for (j = 0; j < keys.length; ++j) {
                            value = data.get(keys[j]);
                            if (value !== undefined) {
                                res.set(keys[j], value);
                            }
                        }
                        _a.label = 4;
                    case 4:
                        ++i;
                        return [3 /*break*/, 2];
                    case 5: return [2 /*return*/, res];
                }
            });
        });
    };
    /**
     * Notify service provider to share data with business by writing TokenPointer in storage
     * and share it with service provider.
     * @param value Business generated nonce
     * @param key A tuple of the uid and spid
     * @param bid Id of the business to share the data
     */
    ShareDataRepositoryImpl.prototype.notifyServiceProvider = function (value, key, bid) {
        return __awaiter(this, void 0, void 0, function () {
            var uid, spid, noncePointer, dataRequests, dataHash, i, request, entries, data, token, tokenPointer, _a, _b, dataEntryKey, updates, grantedFields, grantFields, i;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        uid = NoncePointer_1.default.getUID(key);
                        spid = NoncePointer_1.default.getSPID(key);
                        noncePointer = JSON.parse(value);
                        return [4 /*yield*/, this.dataRequestManager.getRequests(uid, spid)];
                    case 1:
                        dataRequests = _c.sent();
                        dataHash = '';
                        i = 0;
                        _c.label = 2;
                    case 2:
                        if (!(i < dataRequests.length)) return [3 /*break*/, 5];
                        request = dataRequests[i];
                        return [4 /*yield*/, this.profileManager.getAuthorizedData(request.toPk, request.responseData)];
                    case 3:
                        entries = _c.sent();
                        data = entries.get(uid);
                        if (data !== undefined) {
                            dataHash = this.calculateHash(data);
                            return [3 /*break*/, 5];
                        }
                        _c.label = 4;
                    case 4:
                        ++i;
                        return [3 /*break*/, 2];
                    case 5:
                        token = new TokenPointer_1.Token(bid, noncePointer.nonce, dataHash, Date.now().toString());
                        _a = TokenPointer_1.TokenPointer.bind;
                        _b = [void 0, token];
                        return [4 /*yield*/, this.profileManager.signMessage(JSON.stringify(token))];
                    case 6:
                        tokenPointer = new (_a.apply(TokenPointer_1.TokenPointer, _b.concat([_c.sent()])))();
                        dataEntryKey = TokenPointer_1.TokenPointer.generateKey(bid, spid);
                        updates = new Map();
                        // Write own storage
                        updates.set(dataEntryKey, JSON.stringify(tokenPointer));
                        return [4 /*yield*/, this.profileManager.updateData(updates)];
                    case 7:
                        _c.sent();
                        return [4 /*yield*/, this.dataRequestManager.getGrantedPermissionsToMe(spid)];
                    case 8:
                        grantedFields = _c.sent();
                        grantFields = new Map();
                        for (i = 0; i < grantedFields.length; ++i) {
                            grantFields.set(grantedFields[i], Permissions_1.AccessRight.R);
                        }
                        grantFields.set(dataEntryKey, Permissions_1.AccessRight.R);
                        return [4 /*yield*/, this.dataRequestManager.grantAccessForClient(spid, grantFields)];
                    case 9:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ShareDataRepositoryImpl.prototype.calculateHash = function (message) {
        var crypto = require('crypto');
        return crypto.createHash('sha256').update(message).digest('hex');
    };
    ShareDataRepositoryImpl.prototype.grantAccessForClientHelper = function (clientId, key, permission) {
        var _this = this;
        // Get the current status first
        return new Promise(function (resolve) {
            _this.dataRequestManager.getGrantedPermissionsToMe(clientId)
                .then(function (grantedFields) {
                var grantFields = new Map();
                grantedFields.forEach(function (field) { return grantFields.set(field, Permissions_1.AccessRight.R); });
                grantFields.set(key, permission);
                _this.dataRequestManager.grantAccessForClient(clientId, grantFields)
                    .then(function () { return resolve(true); })
                    .catch(function () { return resolve(false); });
            })
                .catch(function () { return resolve(false); });
        });
    };
    /**
     * Helper function to verify the data received at business side
     * @param sharePointer
     * @param uid
     * @param bid
     * @param nonce
     */
    ShareDataRepositoryImpl.prototype.businessVerifyMessage = function (sharePointer, uid, bid, nonce) {
        var Message = require('bitcore-message');
        var bitcore = require('bitcore-lib');
        var addrUser = bitcore.Address(bitcore.PublicKey(uid));
        // Verify signature
        if (!Message(JSON.stringify(sharePointer.tokenPointer.token)).verify(addrUser, sharePointer.tokenPointer.signature)) {
            return false;
        }
        // Verify bid & nonce & hash of data
        if (sharePointer.tokenPointer.token.bid !== bid
            || sharePointer.tokenPointer.token.nonce !== nonce
            || sharePointer.tokenPointer.token.dataHash !== this.calculateHash(sharePointer.data)) {
            return false;
        }
        return true;
    };
    ShareDataRepositoryImpl.prototype.getRandomInt = function () {
        return Math.floor(Math.random() * (ShareDataRepositoryImpl.max - ShareDataRepositoryImpl.min + 1)) + ShareDataRepositoryImpl.min;
    };
    ShareDataRepositoryImpl.min = 1;
    ShareDataRepositoryImpl.max = 0x7FFFFFFF;
    return ShareDataRepositoryImpl;
}());
exports.default = ShareDataRepositoryImpl;
//# sourceMappingURL=ShareDataRepositoryImpl.js.map